AI Smart Four-Wheel Drive Car: Comprehensive Solution with Enhanced Gimbal Control

Date: March 9, 2025 | Version: Final

1. Project Overview
This project utilizes the Raspberry Pi 5 platform, integrating a high-precision camera, a four-wheel-drive chassis, visual SLAM, voice interaction, and web remote control. The enhanced solution includes real-time mapping, web display, and precise camera gimbal control using PWM signals.

Core Features:
- Web Control: Utilize WebSocket and Flask API for remote control, supporting virtual joysticks for car and camera gimbal operation.
- Real-time Video Transmission: Implement WebRTC with a HUANER wide-angle camera for low-latency HD video streaming.
- Four-Motor Control: Use the LOBOROBOT function library for precise car movement control.
- AI Autonomous Navigation: Integrate ORB-SLAM3 for real-time environment mapping and path planning.
- Real-time Map Construction: Process SLAM data to construct a 2D/3D map of the environment.
- Web Map Display: Use JavaScript libraries like Leaflet or Three.js to render the map on the web interface.
- Camera Gimbal Control: Implement PWM9 and PWM10 for horizontal and vertical gimbal control, respectively.

2. Hardware Structure
- Computing Unit: Raspberry Pi 5 for controlling car movement, voice interaction, and web interface.
- Camera: HUANER USB 160° 4K for high-resolution video and mapping data.
- Chassis: Four-Wheel Drive Chassis for versatile movement.
- Servo Gimbal: MG996R + PCA9685 for camera orientation.
  - Horizontal Control: PWM9, initial angle 80°, range ±45°.
  - Vertical Control: PWM10, initial angle 40°, range ±45°.
- MPU6050: IMU Sensor for positioning and navigation.

3. Software System
- Operating System: Ubuntu Server 24.04 LTS
- Core Control Program: LOBOROBOT.py for car movement control.
- Mapping and Navigation: ORB-SLAM3 for real-time mapping and navigation.
- Web Interface: Flask API with WebSocket for real-time data transmission and control.

4. Web Control Interface Design
- Optimized UI Interaction: Dual joystick layout for mobile landscape mode.
  - Left Joystick: Controls car movement (forward, backward, left, right).
  - Right Joystick: Controls camera gimbal rotation (up, down, left, right).
- Real-time Map Display: Render the map using Leaflet or Three.js for interactive visualization.
- Joystick Auto-Centering: Automatically returns to the center when released, sending a stop command.
- Adaptive Turning Speed: Reduces speed to 50% when turning.
- Full-Screen Adaptation: Adjusts size for optimal display.
- Enhanced HUD Design: Overlays speed, direction, and camera angle information.

5. Implementation Steps
1. Integrate ORB-SLAM3: Ensure seamless integration with the camera feed for real-time mapping.
2. Data Processing: Develop a system to process and store map data efficiently.
3. WebSocket Communication: Implement real-time data transmission to the web server.
4. Frontend Development: Use Leaflet or Three.js for map visualization on the web interface.
5. Gimbal Control Implementation: Configure PWM9 and PWM10 for precise gimbal control.
6. Testing and Optimization: Conduct thorough testing to ensure low latency and high performance.
7. Deployment: Deploy the updated system on the Raspberry Pi and ensure all components function correctly. 